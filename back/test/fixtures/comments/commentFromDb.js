const commentFromDb = comment => ({
  id: 1,
  dropboxId: '85',
  text: 'sdcf',
  author: 'bala',
  createdAt: '2020-04-21T09:13:06.397Z',
  updatedAt: '2020-04-21T09:13:06.397Z',
  dataValues: {
    id: 1,
    dropboxId: '85',
    text: 'sdcf',
    author: 'bala',
    createdAt: '2020-04-21T09:13:06.397Z',
    updatedAt: '2020-04-21T09:13:06.397Z',
  },
  _previousDataValues: {
    id: 1,
    dropboxId: '85',
    text: 'sdcf',
    author: 'bala',
    createdAt: '2020-04-21T09:13:06.397Z',
    updatedAt: '2020-04-21T09:13:06.397Z',
  },
  _changed: {},
  _modelOptions: {
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: { dropboxId: '85' },
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Comments', singular: 'Comment' },
    omitNull: false,
    sequelize: {
      options: [Object],
      config: [Object],
      dialect: [Object],
      queryInterface: [Object],
      models: [Object],
      modelManager: [Object],
      connectionManager: [Object],
      importCache: [Object],
    },
    hooks: {},
  },
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: ['id', 'dropboxId', 'text', 'author', 'createdAt', 'updatedAt'],
  },
  isNewRecord: false,
  ...comment,
})

export {
  commentFromDb,
}
